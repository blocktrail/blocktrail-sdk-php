<?php

namespace Blocktrail\SDK\Tests\Wallet;

use BitWasp\Bitcoin\Script\P2shScript;
use BitWasp\Bitcoin\Script\ScriptFactory;
use BitWasp\Bitcoin\Script\WitnessProgram;
use BitWasp\Bitcoin\Script\WitnessScript;
use BitWasp\Buffertools\Buffer;
use Blocktrail\SDK\Bitcoin\BIP32Path;
use Blocktrail\SDK\WalletScript;
use PHPUnit\Framework\TestCase;

class WalletScriptTest extends TestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }
    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testP2shMultisig()
    {
        $rs = new P2shScript(ScriptFactory::fromHex("5221031cc2f421316d93aab290c82cd01ca53a19a82c6bd4285a68b6f12659626f834d210334eea53fc0b0a6261e7e31a71437924779c5460435ebf79428f204b3ef791e37210342a88cc5467c9846b86fc37ac97823aebd3d754470cf7786fe6605674366120153ae"));
        $spk = $rs->getOutputScript();
        $addr = $rs->getAddress();

        $script = new WalletScript(
            BIP32Path::path("M/0'/0/0"),
            $spk, $rs, null, $addr);

        $this->assertSame($rs, $script->getRedeemScript());
        $this->assertSame($spk, $script->getScriptPubKey());
        $this->assertSame($addr, $script->getAddress());
        $this->assertTrue($script->isP2SH());
        $this->assertFalse($script->isP2WSH());
    }
    public function testP2shP2wshMultisig()
    {
        $ws = new WitnessScript(ScriptFactory::fromHex("5221031cc2f421316d93aab290c82cd01ca53a19a82c6bd4285a68b6f12659626f834d210334eea53fc0b0a6261e7e31a71437924779c5460435ebf79428f204b3ef791e37210342a88cc5467c9846b86fc37ac97823aebd3d754470cf7786fe6605674366120153ae"));
        $rs = new P2shScript($ws);
        $spk = $rs->getOutputScript();
        $addr = $rs->getAddress();
        $script = new WalletScript(
            BIP32Path::path("M/0'/2/0"),
            $spk, $rs, $ws, $addr);

        $this->assertSame($ws, $script->getWitnessScript());
        $this->assertSame($rs, $script->getRedeemScript());
        $this->assertSame($spk, $script->getScriptPubKey());
        $this->assertSame($addr, $script->getAddress());
        $this->assertTrue($script->isP2SH());
        $this->assertTrue($script->isP2WSH());
    }
    public function testWithAddress()
    {
        $rs1 = new P2shScript(ScriptFactory::fromHex("5221031cc2f421316d93aab290c82cd01ca53a19a82c6bd4285a68b6f12659626f834d210334eea53fc0b0a6261e7e31a71437924779c5460435ebf79428f204b3ef791e37210342a88cc5467c9846b86fc37ac97823aebd3d754470cf7786fe6605674366120153ae"));
        $spk1 = $rs1->getOutputScript();
        $addr1 = $rs1->getAddress();

        $script = new WalletScript(
            BIP32Path::path("M/0'/0/0"),
            $spk1, $rs1, null, $addr1);

        $this->assertSame($addr1, $script->getAddress());
    }

    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage WitnessScript not set
     */
    public function testWitnessScriptNotSet()
    {
        $rs = new P2shScript(ScriptFactory::fromHex("5221031cc2f421316d93aab290c82cd01ca53a19a82c6bd4285a68b6f12659626f834d210334eea53fc0b0a6261e7e31a71437924779c5460435ebf79428f204b3ef791e37210342a88cc5467c9846b86fc37ac97823aebd3d754470cf7786fe6605674366120153ae"));
        $spk = $rs->getOutputScript();

        $script = new WalletScript(
            BIP32Path::path("M/0'/0/0"),
            $spk, $rs, null);

        $script->getWitnessScript();
    }
    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage This script has no address
     */
    public function testAddressNotSet()
    {
        $rs = new P2shScript(ScriptFactory::fromHex("5221031cc2f421316d93aab290c82cd01ca53a19a82c6bd4285a68b6f12659626f834d210334eea53fc0b0a6261e7e31a71437924779c5460435ebf79428f204b3ef791e37210342a88cc5467c9846b86fc37ac97823aebd3d754470cf7786fe6605674366120153ae"));
        $spk = $rs->getOutputScript();

        $script = new WalletScript(
            BIP32Path::path("M/0'/0/0"),
            $spk, $rs, null);

        $script->getAddress();
    }

    /**
     * @expectedException \Blocktrail\SDK\Exceptions\BlocktrailSDKException
     * @expectedExceptionMessage Mismatch between scriptPubKey and address
     */
    public function testWithWrongAddress()
    {
        $rs1 = new P2shScript(ScriptFactory::fromHex("5221031cc2f421316d93aab290c82cd01ca53a19a82c6bd4285a68b6f12659626f834d210334eea53fc0b0a6261e7e31a71437924779c5460435ebf79428f204b3ef791e37210342a88cc5467c9846b86fc37ac97823aebd3d754470cf7786fe6605674366120153ae"));
        $spk1 = $rs1->getOutputScript();

        $rs2 = new P2shScript(ScriptFactory::fromHex("5221031dd2f421316d93aab290c82cd01ca53a19a82c6bd4285a68b6f12659626f834d210334eea53fc0b0a6261e7e31a71437924779c5460435ebf79428f204b3ef791e37210342a88cc5467c9846b86fc37ac97823aebd3d754470cf7786fe6605674366120153ae"));
        $addr2 = $rs2->getAddress();

        new WalletScript(
            BIP32Path::path("M/0'/0/0"),
            $spk1, $rs1, null, $addr2);
    }

    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage Invalid redeemScript for scriptPubKey
     */
    public function testWithWrongRedeemScript()
    {
        $rs = new P2shScript(ScriptFactory::fromHex("5221031cc2f421316d93aab290c82cd01ca53a19a82c6bd4285a68b6f12659626f834d210334eea53fc0b0a6261e7e31a71437924779c5460435ebf79428f204b3ef791e37210342a88cc5467c9846b86fc37ac97823aebd3d754470cf7786fe6605674366120153ae"));
        $spk = ScriptFactory::scriptPubKey()->p2sh(new Buffer('', 20));

        new WalletScript(
            BIP32Path::path("M/0'/0/0"),
            $spk, $rs, null, null);
    }

    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage scriptPubKey should be script-hash
     */
    public function testWithWrongSpkType()
    {
        $spk = ScriptFactory::scriptPubKey()->p2pkh(new Buffer('', 20));

        new WalletScript(
            BIP32Path::path("M/0'/0/0"),
            $spk, null, null, null);
    }

    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage Expected multisig as redeemScript
     */
    public function testWithWrongRedeemScriptType()
    {
        $rs = new P2shScript(ScriptFactory::scriptPubKey()->p2pkh(new Buffer('', 20)));
        $spk = $rs->getOutputScript();

        new WalletScript(
            BIP32Path::path("M/0'/0/0"),
            $spk, $rs, null, null);
    }
    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage Missing redeemScript
     */
    public function testMissingRedeemScript()
    {
        $spk = ScriptFactory::scriptPubKey()->p2sh(new Buffer('', 20));

        new WalletScript(
            BIP32Path::path("M/0'/0/0"),
            $spk, null, null, null);
    }
    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage Missing witnessScript
     */
    public function testMissingWitnessScript()
    {
        $ws = new WitnessScript(ScriptFactory::fromHex("5221031cc2f421316d93aab290c82cd01ca53a19a82c6bd4285a68b6f12659626f834d210334eea53fc0b0a6261e7e31a71437924779c5460435ebf79428f204b3ef791e37210342a88cc5467c9846b86fc37ac97823aebd3d754470cf7786fe6605674366120153ae"));
        $rs = new P2shScript($ws);
        $spk = $rs->getOutputScript();

        new WalletScript(
            BIP32Path::path("M/0'/2/0"),
            $spk, $rs, null, null);
    }
    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage P2SH script should be v0_scripthash
     */
    public function testExpectedP2wshRedeemScript()
    {
        $rs = new P2shScript(ScriptFactory::fromHex("5221031cc2f421316d93aab290c82cd01ca53a19a82c6bd4285a68b6f12659626f834d210334eea53fc0b0a6261e7e31a71437924779c5460435ebf79428f204b3ef791e37210342a88cc5467c9846b86fc37ac97823aebd3d754470cf7786fe6605674366120153ae"));
        $spk = $rs->getOutputScript();

        new WalletScript(
            BIP32Path::path("M/0'/2/0"),
            $spk, $rs, null, null);
    }
    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage P2SH script should be v0_scripthash
     */
    public function testExpectedNotP2wpkhRedeemScript()
    {
        $wp = new WitnessProgram(0, new Buffer('', 20));
        $rs = new P2shScript($wp->getScript());
        $spk = $rs->getOutputScript();

        new WalletScript(
            BIP32Path::path("M/0'/2/0"),
            $spk, $rs, null, null);
    }
    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage Invalid witnessScript for p2sh v0_scripthash
     */
    public function testWitnessScriptHashMismatch()
    {
        $ws = new WitnessScript(ScriptFactory::fromHex("5221031cc2f421316d93aab290c82cd01ca53a19a82c6bd4285a68b6f12659626f834d210334eea53fc0b0a6261e7e31a71437924779c5460435ebf79428f204b3ef791e37210342a88cc5467c9846b86fc37ac97823aebd3d754470cf7786fe6605674366120153ae"));
        $rs = new P2shScript($ws);
        $spk = $rs->getOutputScript();

        $ws2 = new WitnessScript(ScriptFactory::fromHex("5221031dd2f421316d93aab290c82cd01ca53a19a82c6bd4285a68b6f12659626f834d210334eea53fc0b0a6261e7e31a71437924779c5460435ebf79428f204b3ef791e37210342a88cc5467c9846b86fc37ac97823aebd3d754470cf7786fe6605674366120153ae"));


        new WalletScript(
            BIP32Path::path("M/0'/2/0"),
            $spk, $rs, $ws2, null);
    }
    /**
     * @expectedException \RuntimeException
     * @expectedExceptionMessage Expected multisig as witnessScript
     */
    public function testWrongWitenssScriptType()
    {
        $ws = new WitnessScript(ScriptFactory::scriptPubKey()->p2pkh(new Buffer('', 20)));
        $rs = new P2shScript($ws);
        $spk = $rs->getOutputScript();

        new WalletScript(
            BIP32Path::path("M/0'/2/0"),
            $spk, $rs, $ws, null);
    }
}
